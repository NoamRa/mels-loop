import { IMLParsedNode } from "../interfaces/models";
import { ALLOWED_HTML_ATTRIBUTES } from "../config/html-attributes";

/**
 * CLIENT SIDE Streamlined access to the content generated by next.js in the ML component props
 */
export interface IMLNextBrowserUtils {
	/**
	 * Return the page data, parsed from json if relevant
	 *
	 * Guaranteed not null
	 * @param pageData
	 */
	getParsedPagedData<T>(pageData: string | object | null): T[];
	/**
	 * Returns an object with key-value entries for attributes that are valid for
	 * the provided node
	 * @param node 
	 */
	extractNodeAttributes(node: IMLParsedNode): { [name: string]: string };
}

class MLNextBrowserUtils implements IMLNextBrowserUtils {
	public getParsedPagedData<T>(pageData: string | object | null): T[] {
		if (!pageData) {
			return [];
		}
		const parsedData =
			typeof pageData === "string" ? JSON.parse(pageData) : pageData;
		return Array.isArray(parsedData) ? parsedData : [];
	}

	public extractNodeAttributes(node: IMLParsedNode): { [name: string]: string } {
		const attrs: { [name: string]: string } = {};
		const rec = ALLOWED_HTML_ATTRIBUTES[node.type];
		const nodeAttrs = node.attributes;
		if (!rec || !nodeAttrs) {
			return attrs;
		}
		Object.keys(nodeAttrs).forEach(key => {
			if (rec.valid.includes(key)) {
				attrs[key] = nodeAttrs[key];
			}
		});
		return attrs;
	}

}

export const mlNextBrowserUtils: IMLNextBrowserUtils = new MLNextBrowserUtils();
